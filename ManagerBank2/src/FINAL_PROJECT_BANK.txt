package Deals;

import java.util.*;

public class Deal {


	protected long idDeal, idCustomer, idReceive;
	protected String date, time, note;
	protected double money;
	protected int kind;

	public Deal() {
		this.date = null;
		this.idCustomer = 0;
		this.idDeal = 0;
		this.idReceive = 0;
		this.kind = 0;
		this.money = 0;
		this.note = null;
		this.time = null;
	}

	public Deal(long idDeal, int kind, String date, String time, long idCustomer, double money, long idReceive,
			String note) {
		this.date = date;
		this.idCustomer = idCustomer;
		this.idDeal = idDeal;
		this.idReceive = idReceive;
		this.kind = kind;
		this.money = money;
		this.note = note;
		this.time = time;
	}

	public long getIdDeal() {
		return idDeal;
	}

	public void setIdDeal(long idDeal) {
		this.idDeal = idDeal;
	}

	public long getIdCustomer() {
		return idCustomer;
	}

	public void setIdCustomer(long idCustomer) {
		this.idCustomer = idCustomer;
	}

	public long getIdReceive() {
		return idReceive;
	}

	public void setIdReceive(long idReceive) {
		this.idReceive = idReceive;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}

	public String getTime() {
		return time;
	}

	public void setTime(String time) {
		this.time = time;
	}

	public String getNote() {
		return note;
	}

	public void setNote(String note) {
		this.note = note;
	}

	public double getMoney() {
		return money;
	}

	public void setMoney(double money) {
		this.money = money;
	}

	public int getKind() {
		return kind;
	}

	public void setKind(int kind) {
		this.kind = kind;
	}

	public String toString() {
		return "\nID of Deal: " + String.valueOf(idDeal) + "\nKind of Deal: " + kindToString(kind) + "\nDate of Deal: "
				+ date + "\nTime of Deal: " + time + "\nID of Customer: " + String.valueOf(idCustomer)
				+ "\nMoney of Deal: " + String.valueOf(money) + "\nID of Receive: " + String.valueOf(idReceive)
				+ "\nNote: " + note;
	}

	

	public String kindToString(int kind) {
		if (kind == 1)
			return "Put On Money";
		else
			return (kind == 2 ? "Get Out Money" : "Transfer Money");
	}

}
package Deals;

public class listDeals {
	public int countDeals;
	public Deal[] listOfDeals = new Deal[100];

	public void initList() {
		countDeals = 0;
		for (int i = 0; i < 100; i++)
			listOfDeals[i] = new Deal();
	}

	public boolean addDeals(Deal d) {
		if (countDeals > 100) {
			System.out.println("Not enought Empty!!");
			return false;
		} else {
			listOfDeals[countDeals] = d;
			System.out.println("Add deal to list successful!!");
			countDeals++;
			return true;
		}
	}

	public void showList() {
		for (int i = countDeals - 1; i >= 0 ; i--) {
			System.out.println("\nInformation Deal " + (i + 1) + ": ");
			System.out.println(listOfDeals[i].toString());
		}
	}

	public void findByIdCustomer(long id) {
		boolean check = false;
		for (int i = countDeals - 1; i >= 0 ; i--)
			if (listOfDeals[i].idCustomer == id || listOfDeals[i].idReceive == id) {
				System.out.println(listOfDeals[i].toString() + "\n");
				check = true;
			}
		if (!check)
			System.out.println("Find not Found!");
	}

	public void findByIdDeals(long id) {
		boolean check = false;
		for (int i = countDeals - 1; i >= 0 ; i--)
			if (listOfDeals[i].idDeal == id) {
				System.out.println(listOfDeals[i].toString() + "\n");
				check = true;
			}
		if (!check)
			System.out.println("Find not Found!");
	}

	public void findByDate(String date) {
		boolean check = false;
		for (int i = countDeals - 1; i >= 0 ; i--)
			if (listOfDeals[i].date.equalsIgnoreCase(date)) {
				System.out.println(listOfDeals[i].toString() + "\n");
				check = true;
			}
		if (!check)
			System.out.println("Find not Found!");
	}

	public void findByLowMoney(double money) {
		boolean check = false;
		for (int i = countDeals - 1; i >= 0 ; i--)
			if (listOfDeals[i].money <= money) {
				System.out.println(listOfDeals[i].toString() + "\n");
				check = true;
			}
		if (!check)
			System.out.println("Find not Found!");
	}

	public void findByHighMoney(double money) {
		boolean check = false;
		for (int i = countDeals - 1; i >= 0 ; i--)
			if (listOfDeals[i].money >= money) {
				System.out.println(listOfDeals[i].toString() + "\n");
				check = true;
			}
		if (!check)
			System.out.println("Find not Found!");
	}

}
package Function;

import java.io.IOException;
import java.util.*;
import Deals.*;
import Users.*;

public class Function {

	
	Random generator = new Random(9999);
	Scanner objSc = new Scanner(System.in);

	public boolean signIn(listUsers LU, long id, String password) {

		for (int i = 0; i < LU.countUsers; i++)
			if (LU.listOfUsers[i].getId() == id && LU.listOfUsers[i].getPassword().equals(password)) {
				System.out.println("Sign In Successful !! Hello, " + LU.listOfUsers[i].getName());
				return true;
			}
		System.out.println("Sign In Failed!! ");
		return false;
	}

	public boolean signUp(listUsers LU, Customer cus) throws IOException {
		long id;
		String name, address, password1, password2, phone;
		double money;

		do {
			id = (int) Math.floor(((Math.random() * 899999) + 100000));
		} while (!checkId(LU, id) || !cus.setId(id));

		do {
			System.out.print("Input Name: ");
			name = objSc.nextLine();
		} while (!cus.setName(name));

		do {
			System.out.print("Input Address: ");
			address = objSc.nextLine();
		} while (!cus.setAddress(address));

		do {
			System.out.print("Input Money: ");
			money = objSc.nextDouble();
		} while (!cus.setMoney(money));
		
		do {
			System.out.print("Input Number Phone: ");
			objSc.nextLine();
			phone = objSc.nextLine();
		} while (!cus.setPhone(phone));
		
		do {
			objSc.nextLine();
			System.out.print("Input Password: ");
			password1 = objSc.nextLine();
			System.out.print("Confirm Password: ");
			password2 = objSc.nextLine();
		} while (!checkPassword(password1, password2) || !cus.setPassword(password1));

		System.out.println("Sign Up Successful !");
		return true;
	}

	public boolean signUp(listUsers LU, Employee emp) throws IOException {
		long id;
		double salary;
		
		String name, address, password1, password2, phone;
		do {
			id = (int) Math.floor(((Math.random() * 899999) + 100000));
		} while (!checkId(LU, id) || !emp.setId(id));

		do {
			System.out.print("Input Name: ");
			name = objSc.nextLine();
		} while (!emp.setName(name));

		do {
			System.out.print("Input Address: ");
			address = objSc.nextLine();
		} while (!emp.setAddress(address));

		do {
			System.out.print("Input Salary: ");
			salary = objSc.nextDouble();
		} while (!emp.setSalary(salary));

		do {
			System.out.print("Input Number Phone: ");
			objSc.nextLine();
			phone = objSc.nextLine();
		} while (!emp.setPhone(phone));
		
		do {
			objSc.nextLine();
			System.out.print("Input Password: ");
			password1 = objSc.nextLine();
			System.out.print("Confirm Password: ");
			password2 = objSc.nextLine();
		} while (!checkPassword(password1, password2) || !emp.setPassword(password1));

		System.out.println("\nSign Up Successful !");
		return true;
	}
	
	public boolean deleteUser(listUsers LU, long id, int verificationCode) {
		Users tmp = LU.listOfUsers[LU.findById(id)];
		
		if(tmp.getVerificationCode() != verificationCode) {
			System.out.println("Verification Code not Match !!");
			return false;
		}
		
		for(int i = LU.findById(id); i < LU.countUsers - 1; i++)
			LU.listOfUsers[i] = LU.listOfUsers[i+1];
		
		LU.countUsers --;
		
		System.out.println("Delete Users Successful !");
		return true;
	}
	
	public boolean deleteUser(listUsers LU, long id) {
		
		for(int i = LU.findById(id); i < LU.countUsers - 1; i++)
			LU.listOfUsers[i] = LU.listOfUsers[i+1];
		
		LU.countUsers --;
		
		System.out.println("Delete Users Successful !");
		return true;
	}
	
	public boolean changePassword(Users user, String newPass, int verificationCode) {
		
		if(user.getVerificationCode() != verificationCode) {
			System.out.println("Verification Code not Match !!\nChange Password Failed");
			return false;
		}
		
		if(!user.setPassword(newPass)) {
			System.out.println("\nChange Password Failed");
			return false;
		}
		
		System.out.println("\nChange Password Successful !");
		return true;
	}

	public boolean checkId(listUsers LU, long id) {
		for (int i = 0; i <= LU.countUsers; i++) {
			if (LU.listOfUsers[i].getId() == id)
				return false;
		}
		return true;
	}

	public boolean checkId(listDeals LD, long id) {
		for (int i = 0; i <= LD.countDeals; i++) {
			if (LD.listOfDeals[i].getIdDeal() == id)
				return false;
		}
		return true;
	}

	public boolean checkPassword(String password1, String password2) {
		if (!password1.equals(password2)) {
			System.out.println("\nPassword not match, Try again!!\n");
			return false;
		}
		
		if (password1.length() < 4) {
			System.out.println("\nPassword must longer 4 character, Try again!!\n");
			return false;
		}
		
		System.out.println("\nConfirm Password Successful !!");
		return true;
	}
	
	public boolean checkPassword(Users user, String password) {
		if (!user.getPassword().equals(password)) {
			System.out.println("\nPassword not match, Try again!!\n");
			return false;
		}
		return true;
	}

	public String dateToString() {
		Calendar c = Calendar.getInstance();
		return String.valueOf(c.get(Calendar.DATE)) + "/" + String.valueOf(c.get(Calendar.MONTH) + 1) + "/"
				+ String.valueOf(c.get(Calendar.YEAR));
	}

	public String timeToString() {
		Calendar c = Calendar.getInstance();
		return String.valueOf(c.get(Calendar.HOUR_OF_DAY)) + "H : " + String.valueOf(c.get(Calendar.MINUTE)) + "M : "
				+ String.valueOf(c.get(Calendar.SECOND) + "S");
	}

}
package Main;

import java.io.*;
import java.util.*;
import Users.*;
import Function.*;
import Deals.*;

public class Main {

	public static void main(String[] args) throws IOException {

		Scanner objSc = new Scanner(System.in);
		Users user = new Users();
		Customer cus = new Customer();
		Customer cusR = new Customer();
		Employee emp = new Employee();
		listUsers LU = new listUsers();
		Function F = new Function();
		listDeals LD = new listDeals();
		Manager man = new Manager();

		int number, kind, choose, choose1, location, verificationCode, choose2, choose3, con;
		long id, idReceive, idCustomer, idDeal = 0;
		String password, note, name, date, password1, password2;
		double money;

		LU.initList();
		LD.initList();

		System.out.print("\nInput Data\nInput number users: ");
		number = objSc.nextInt();
		for (int i = 0; i < number; i++) {
			do {
				System.out.print("\nChoose Kind of User:\n1.Customer\n2.Employee\n3.Manager\n\nYour choose:  ");
				kind = objSc.nextInt();
				if (kind < 1 || kind > 3)
					System.out.println("Value not available, Try again!!");
			} while (kind < 1 || kind > 3);

			if (kind == 1) {
				user = new Customer();
				user.input(LU);
				user.setKind(kind);
				LU.addUsers(user);

			} else if (kind == 2) {
				user = new Employee();
				user.input(LU);
				user.setKind(kind);
				LU.addUsers(user);

			} else {
				user = new Manager();
				user.input(LU);
				user.setKind(kind);
				LU.addUsers(user);
			}
		}
		//
		do {

			do {
				System.out.print("\n1.Log In\n2.Exit\nYour Choose: ");
				choose = objSc.nextInt();
				if (choose < 1 || choose > 2)
					System.out.println("Value not available, Try again!!");
			} while (choose < 1 || choose > 2);

			// Sign In
			if (choose == 1) { //
				do {
					System.out.print("\nID: ");
					id = objSc.nextLong();
					System.out.print("Password: ");
					objSc.nextLine();
					password = objSc.nextLine();
				} while (!F.signIn(LU, id, password));

				location = LU.findById(id);
				System.out.println("\nInformation \n" + LU.listOfUsers[location].toString());

				// Kind of Users (LU.listOfUsers[location].getKind())

				// Customer

				if (LU.listOfUsers[location].getKind() == 1) {
					do {
						do {
							System.out.print(
									"\n1.Put On Money\n2.Get Out Money\n3.Transfer Money\n4.Show Information\n5.Show History Deals\n6.Change Password\nYour Choose: ");
							choose1 = objSc.nextInt();
							if (choose1 < 1 || choose1 > 6)
								System.out.println("Value not available, Try again!!");
						} while (choose1 < 1 || choose1 > 6);

						switch (choose1) {

						// Put On Money
						case 1: {
							do {
								System.out.print("Input Money: ");
								money = objSc.nextDouble();
								note = "Not Note";
								cus = (Customer) LU.listOfUsers[location];

							} while (!cus.putOnMoney(money));
							do {
								idDeal = (int) Math.floor(((Math.random() * 899999) + 100000));
							} while (!F.checkId(LD, idDeal));
							Deal D = new Deal(idDeal, choose1, F.dateToString(), F.timeToString(), cus.getId(), money,
									cus.getId(), note);
							System.out.println("\n Information Deal\n" + D.toString());
							LD.addDeals(D);
							break;
						}
						// Get Out Money
						case 2: {
							do {
								System.out.print("Input Money: ");
								money = objSc.nextDouble();
								note = "Not Note";

								cus = (Customer) LU.listOfUsers[location];
							} while (!cus.getOutMoney(money));
							do {
								idDeal = (int) Math.floor(((Math.random() * 899999) + 100000));
							} while (!F.checkId(LD, idDeal));
							Deal D = new Deal(idDeal, choose1, F.dateToString(), F.timeToString(), cus.getId(), money,
									cus.getId(), note);
							System.out.println("\n Information Deal\n" + D.toString());
							LD.addDeals(D);
							break;
						}
						// Transfer Money
						case 3: {
							do {
								System.out.print("Input Money: ");
								money = objSc.nextDouble();
								do {
									System.out.print("Input ID Receive: ");
									idReceive = objSc.nextLong();
								} while (!LU.checkId(idReceive, 1));
								System.out.print("Input Note: ");
								objSc.nextLine();
								note = objSc.nextLine();

								cus = (Customer) LU.listOfUsers[location];
								cusR = (Customer) LU.listOfUsers[LU.findById(idReceive)];
							} while (!cus.transferMoney(cusR, money));
							do {
								idDeal = (int) Math.floor(((Math.random() * 899999) + 100000));
							} while (!F.checkId(LD, idDeal));
							Deal D = new Deal(idDeal, choose1, F.dateToString(), F.timeToString(), cus.getId(), money,
									idReceive, note);
							System.out.println("\n Information Deal\n" + D.toString());
							LD.addDeals(D);
							break;
						}
						// Show Infomation
						case 4: {
							System.out.println("\nInformation \n" + LU.listOfUsers[location].toString());
							break;
						}
						// Show History Deals
						case 5: {
							cus = (Customer) LU.listOfUsers[location];
							LD.findByIdCustomer(cus.getId());
							break;
						}
						// Change Password
						case 6: {
							user = LU.listOfUsers[location];
							do {
								objSc.nextLine();
								System.out.print("Enter your Password: ");
								password = objSc.nextLine();
								System.out.print("Enter New Password: ");
								password1 = objSc.nextLine();
								System.out.print("Confirm New Password: ");
								password2 = objSc.nextLine();
							} while (!F.checkPassword(user, password) || !F.checkPassword(password1, password2));

							user.setVerificationCode((int) Math.floor(((Math.random() * 899999) + 100000)));

							System.out.println(
									"*** In display phone of Customer: " + user.getVerificationCode() + " ***");

							System.out.print("\nInput Verification Code: ");
							verificationCode = objSc.nextInt();

							F.changePassword(user, password1, verificationCode);

							break;
						}
						}
						do {
							System.out.print("Do you want continue? (1.Yes / 2.No): ");
							con = objSc.nextInt();
							if (con < 1 || con > 2)
								System.out.println("Value not available, Try again !");
						} while (con < 1 || con > 2);
					} while (con == 1);
				}

				// Employee
				else if (LU.listOfUsers[location].getKind() == 2) {
					do {
						do {
							System.out.print(
									"\n1.Put On Money\n2.Get Out Money\n3.Transfer Money\n4.Find Customers\n5.Find Deals\n6.Sign up Customer Users\n7.Delete Customer\n8.Change Password\nYour Choose: ");
							choose1 = objSc.nextInt();
							if (choose1 < 1 || choose1 > 8)
								System.out.println("Value not available, Try again!!");
						} while (choose1 < 1 || choose1 > 8);

						switch (choose1) {

						// Put On Money
						case 1: {

							do {
								do {
									System.out.print("\nInput ID Customer: ");
									idCustomer = objSc.nextLong();
								} while (!LU.checkId(idCustomer, 1));
								System.out.print("Input Money: ");
								money = objSc.nextDouble();
								objSc.nextLine();
								System.out.print("Input Note: ");
								note = objSc.nextLine();

								cus = (Customer) LU.listOfUsers[LU.findById(idCustomer)];

								cus.setVerificationCode((int) Math.floor(((Math.random() * 899999) + 100000)));

								System.out.println(
										"*** In display phone of Customer: " + cus.getVerificationCode() + " ***");

								System.out.print("\nInput Verification Code: ");
								verificationCode = objSc.nextInt();

								emp = (Employee) LU.listOfUsers[location];

							} while (!emp.putOnMoney(cus, money, verificationCode));
							do {
								idDeal = (int) Math.floor(((Math.random() * 899999) + 100000));
							} while (!F.checkId(LD, idDeal));
							Deal D = new Deal(idDeal, choose1, F.dateToString(), F.timeToString(), idCustomer, money,
									idCustomer, note);
							System.out.println("\n Information Deal\n" + D.toString());
							LD.addDeals(D);
							break;
						}
						// Get Out Money
						case 2: {
							do {
								do {
									System.out.print("\nInput ID Customer: ");
									idCustomer = objSc.nextLong();
								} while (!LU.checkId(idCustomer, 1));
								System.out.print("Input Money: ");
								money = objSc.nextDouble();
								System.out.print("Input Note: ");
								objSc.nextLine();
								note = objSc.nextLine();

								cus = (Customer) LU.listOfUsers[LU.findById(idCustomer)];

								cus.setVerificationCode((int) Math.floor(((Math.random() * 899999) + 100000)));

								System.out.println(
										"*** In display phone of Customer: " + cus.getVerificationCode() + " ***");

								System.out.print("Input Verification Code: ");
								verificationCode = objSc.nextInt();

								emp = (Employee) LU.listOfUsers[location];

							} while (!emp.getOutMoney(cus, money, verificationCode));
							do {
								idDeal = (int) Math.floor(((Math.random() * 899999) + 100000));
							} while (!F.checkId(LD, idDeal));
							Deal D = new Deal(idDeal, choose1, F.dateToString(), F.timeToString(), idCustomer, money,
									idCustomer, note);
							System.out.println("\n Information Deal\n" + D.toString());
							LD.addDeals(D);
							break;
						}
						// Transfer Money
						case 3: {
							do {
								do {
									System.out.print("\nInput ID Customer: ");
									idCustomer = objSc.nextLong();
								} while (!LU.checkId(idCustomer, 1));
								do {
									System.out.print("Input ID Receive: ");
									idReceive = objSc.nextLong();
								} while (!LU.checkId(idReceive, 1));
								System.out.print("Input Money: ");
								money = objSc.nextDouble();
								System.out.print("Input Note: ");
								objSc.nextLine();
								note = objSc.nextLine();

								cus = (Customer) LU.listOfUsers[LU.findById(idCustomer)];
								cusR = (Customer) LU.listOfUsers[LU.findById(idReceive)];

								cus.setVerificationCode((int) Math.floor(((Math.random() * 899999) + 100000)));

								System.out.println("\n*** In display phone of Customer: \nVerification Code: "
										+ cus.getVerificationCode() + " ***");

								System.out.print("\nInput Verification Code: ");
								verificationCode = objSc.nextInt();

								emp = (Employee) LU.listOfUsers[location];

							} while (!emp.transferMoney(cus, cusR, money, verificationCode));
							do {
								idDeal = (int) Math.floor(((Math.random() * 899999) + 100000));
							} while (!F.checkId(LD, idDeal));
							Deal D = new Deal(idDeal, choose1, F.dateToString(), F.timeToString(), idCustomer, money,
									idReceive, note);
							System.out.println("\n Information Deal\n" + D.toString());
							LD.addDeals(D);
							break;
						}
						// find customers
						case 4: {
							do {
								System.out.print("\n1.Find customer by ID\n2.Find customer by Name\nYour Choose: ");
								choose2 = objSc.nextInt();
								if (choose2 < 1 || choose2 > 2)
									System.out.println("Value not available, Try again!!");
							} while (choose2 < 1 || choose2 > 2);

							if (choose2 == 1) {
								System.out.print("\nInput ID: ");
								idCustomer = objSc.nextLong();
								LU.findByIdCus(idCustomer);
							} else {
								System.out.print("\nInput Name: ");
								objSc.nextLine();
								name = objSc.nextLine();
								LU.findByNameCus(name);
							}
							break;
						}
						// Find deals
						case 5: {
							do {
								System.out.print(
										"\n1.Find Deals by Money\n2.Find Deals by ID\n3.Find Deals by Date\nYour Choose: ");
								choose2 = objSc.nextInt();
								if (choose2 < 1 || choose2 > 3)
									System.out.println("Value not available, Try again!!");
							} while (choose2 < 1 || choose2 > 3);

							if (choose2 == 1) {
								System.out.print("\nInput Money: ");
								money = objSc.nextDouble();
								do {
									System.out.print("\n1.Find lower Money\n2.Find higher Money\nYour Choose: ");
									choose3 = objSc.nextInt();
									if (choose3 < 1 || choose3 > 2)
										System.out.println("Value not available, Try again!!");
								} while (choose3 < 1 || choose3 > 2);

								if (choose3 == 1)
									LD.findByLowMoney(money);
								else
									LD.findByHighMoney(money);

							} else if (choose2 == 2) {
								System.out.print("\nInput Deal ID: ");
								idDeal = objSc.nextLong();
								LD.findByIdDeals(idDeal);

							} else if (choose2 == 3) {
								System.out.print("\nInput Date: ");
								objSc.nextLine();
								date = objSc.nextLine();
								LD.findByDate(date);
							}
							break;
						}
						// Sign Up
						case 6: {
							Customer tmp = new Customer();
							F.signUp(LU, tmp);
							tmp.setKind(1);
							LU.addUsers(tmp);
							System.out.println("\nInformation " + tmp.toString());
							break;
						}
						// delete customer
						case 7: {
							do {
								do {
									System.out.print("\nInput ID Customer: ");
									idCustomer = objSc.nextLong();
								} while (!LU.checkId(idCustomer, 1));

								user = LU.listOfUsers[LU.findById(idCustomer)];

								user.setVerificationCode((int) Math.floor(((Math.random() * 899999) + 100000)));

								System.out.println(
										"*** In display phone of Customer: " + user.getVerificationCode() + " ***");

								System.out.print("\nInput Verification Code: ");
								verificationCode = objSc.nextInt();

							} while (!F.deleteUser(LU, idCustomer, verificationCode));
							break;
						}
						// change password
						case 8: {
							user = LU.listOfUsers[location];
							do {
								objSc.nextLine();
								System.out.print("Enter your Password: ");
								password = objSc.nextLine();
								System.out.print("Enter New Password: ");
								password1 = objSc.nextLine();
								System.out.print("Confirm New Password: ");
								password2 = objSc.nextLine();
							} while (!F.checkPassword(user, password) || !F.checkPassword(password1, password2));

							user.setVerificationCode((int) Math.floor(((Math.random() * 899999) + 100000)));

							System.out.println(
									"*** In display phone of Customer: " + user.getVerificationCode() + " ***");

							System.out.print("\nInput Verification Code: ");
							verificationCode = objSc.nextInt();

							F.changePassword(user, password1, verificationCode);

							break;
						}
						}
						do {
							System.out.print("Do you want continue? (1.Yes / 2.No): ");
							con = objSc.nextInt();
							if (con < 1 || con > 2)
								System.out.println("Value not available, Try again !");
						} while (con < 1 || con > 2);
					} while (con == 1);
				} else {
					// Manager
					do {
						do {
							System.out.print(
									"\n1.Statistical\n2.Sign Up Employee Users\n3.Delete Employee\n4.Show all Users\n5.Show all Deals\n6.Change Password\nYour Choose: ");
							choose1 = objSc.nextInt();
							if (choose1 < 1 || choose1 > 6) {
								System.out.println("Value not available, Try again!");

							}
						} while (choose1 < 1 || choose1 > 6);

						switch (choose1) {
						// Statistical
						case 1: {
							man.statistical();
							break;
						}
						// Sign Up Employee Users
						case 2: {
							Employee tmp = new Employee();
							F.signUp(LU, tmp);
							tmp.setKind(2);
							LU.addUsers(tmp);
							break;
						}
						// Delete Employee
						case 3: {
							do {
								do {
									System.out.print("\nInput ID Employee: ");
									idCustomer = objSc.nextLong();
								} while (!LU.checkId(idCustomer, 2));

								user = LU.listOfUsers[LU.findById(idCustomer)];

							} while (!F.deleteUser(LU, idCustomer));
							break;
						}
						// Show all Users
						case 4: {
							LU.showList();
							break;
						}
						// Show all Deals
						case 5: {
							LD.showList();
							break;
						}
						// Change Password
						case 6: {
							user = LU.listOfUsers[location];
							do {
								objSc.nextLine();
								System.out.print("Enter your Password: ");
								password = objSc.nextLine();
								System.out.print("Enter New Password: ");
								password1 = objSc.nextLine();
								System.out.print("Confirm New Password: ");
								password2 = objSc.nextLine();
							} while (!F.checkPassword(user, password) || !F.checkPassword(password1, password2));

							user.setVerificationCode((int) Math.floor(((Math.random() * 899999) + 100000)));

							System.out.println(
									"*** In display phone of Customer: " + user.getVerificationCode() + " ***");

							System.out.print("\nInput Verification Code: ");
							verificationCode = objSc.nextInt();

							F.changePassword(user, password1, verificationCode);

							break;
						}

						}
						do {
							System.out.print("\nDo you want continue? (1.Yes / 2.No): ");
							con = objSc.nextInt();
							if (con < 1 || con > 2)
								System.out.println("Value not available, Try again !");
						} while (con < 1 || con > 2);
					} while (con == 1);
				}
			}
		} while (choose != 2);

	}
}
package Users;

import java.io.*;
import java.util.*;
import Function.*;

public class Users {
	Function F = new Function();
	Scanner objSc = new Scanner(System.in);
	Random generator = new Random(9999);
	
	protected int kind;
	protected String name, address, phone;
	protected long id;
	private String password;
	private int verificationCode;

	public Users() {
		this.kind = 0;
		this.name = null;
		this.address = null;
		this.id = 0;
		this.password = null;
		this.verificationCode = 0;
	}

	public Users(long id, String name, String address, String password, int kind, int verificationCode, String phone) {
		this.address = address;
		this.id = id;
		this.name = name;
		this.password = password;
		this.kind = kind;
		this.verificationCode = verificationCode;
		this.phone = phone;

	}
	
	public String getPhone() {
		return phone;
	}

	public boolean setPhone(String phone) {
		if (phone.isEmpty()) {
			System.out.println("Can not Empty, Try again !!");
			return false;
		}
		this.phone = phone;
		return true;
	}

	public int getVerificationCode() {
		return verificationCode;
	}

	public void setVerificationCode(int verificationCode) {
		this.verificationCode = verificationCode;
	}
	
	public int getKind() {
		return kind;
	}

	public boolean setKind(int kind) {
		if (kind < 1 || kind > 3) {
			System.out.println("Value not Available, Try again!!");
			return false;
		}
		this.kind = kind;
		return true;
	}

	public String getName() {
		return name;
	}

	public boolean setName(String name) {
		if (name.isEmpty()) {
			System.out.println("Can not Empty, Try again !!");
			return false;
		}
		this.name = name;
		return true;
	}

	public String getAddress() {
		return address;
	}

	public boolean setAddress(String address) {
		if (address.isEmpty()) {
			System.out.println("Can not Empty, Try again !!");
			return false;
		}
		this.address = address;
		return true;
	}

	public long getId() {
		return id;
	}

	public boolean setId(long id) {
		if (id <= 0) {
			System.out.println("Value not available, Try again !!");
			return false;
		}
		this.id = id;
		return true;
	}

	public String getPassword() {
		return password;
	}

	public boolean setPassword(String password) {
		if (password.isEmpty()) {
			System.out.println("Can not Empty, Try again !!");
			return false;
		}
		this.password = password;
		return true;
	}

	public void input(listUsers LU) throws IOException {
		String name, address, password;
		long id;
		
		do {
			System.out.print("Input ID: ");
			id = (int) Math.floor(((Math.random() * 899999) + 100000));
			
		} while (!setId(id) || !F.checkId(LU, id));
		System.out.println(id);
		do {
			System.out.print("Input Name: ");
			name = objSc.nextLine();
		} while (!setName(name));

		do {
			System.out.print("Input Address: ");
			address = objSc.nextLine();
		} while (!setAddress(address));
		
		do {
			System.out.print("Input Phone: ");
			phone = objSc.nextLine();
		} while (!setPhone(phone));

		do {
			System.out.print("Input Password: ");
			password = objSc.nextLine();
		} while (!setPassword(password));

	}

	public String toString() {
		return "\nID: " + String.valueOf(getId()) + "\nName: " + getName() + "\nAddress: " + getAddress() + "\nPhone: " + getPhone() ;
	}

}
package Users;

import java.io.*;
import java.util.*;
import Function.*;

public class Customer extends Users {
	Function F = new Function();
	Scanner objSc = new Scanner(System.in);

	private double money;

	public Customer() {
		super();
		this.money = 0;
		
	}

	public Customer(long id, String name, String address, String password, int kind, int verificationCode, String phone, double money) {
		super(id, name, address, password, kind, verificationCode, phone);
		this.money = money;
	}

	public double getMoney() {
		return money;
	}

	public boolean setMoney(double money) {
		if (money < 0) {
			System.out.println("Value not available, Try again!!");
			return false;
		}
		this.money = money;
		return true;
	}

	public void input(listUsers LU) throws IOException {
		double money;
		super.input(LU);
		do {
			System.out.print("Input Money: ");
			money = objSc.nextDouble();
		} while (!setMoney(money));
	}

	public String toString() {
		return "Customer" + super.toString() + "\nMoney: " + String.valueOf(money);
	}

	public boolean transferMoney(Customer receive, double money) {

		if (!this.setMoney(this.getMoney() - money - money * 5 / 100)) {
			System.out.println("Not enough money, Try again !");
			return false;
		}
		receive.setMoney(receive.getMoney() + money);
		System.out.println("Transfer Successful !");
		return true;

	}

	public boolean getOutMoney(double money) {
		if (!this.setMoney(this.getMoney() - money - money * 5 / 100)) {
			System.out.println("Not enough money, Try again !");
			return false;
		}

		System.out.println("Get Out Money Successful !");
		return true;

	}

	public boolean putOnMoney(double money) {
		this.setMoney(this.getMoney() + money);
		System.out.println("Put On Money Successful !");
		return true;
	}

}
package Users;

import java.io.*;
import java.util.*;

import Function.*;

public class Employee extends Users {
	Function F = new Function();
	Scanner objSc = new Scanner(System.in);

	private double salary;

	public Employee() {
		super();
		this.salary = 0;
	}

	public Employee(long id, String name, String address, String password, int kind, int verificationCode, String phone, double salary) {
		super(id, name, address, password, kind, verificationCode, phone);
		this.salary = salary;
	}

	public double getSalary() {
		return salary;
	}

	public boolean setSalary(double salary) {
		if (salary < 0) {
			System.out.println("Value not available, Try again!!");
			return false;
		}
		this.salary = salary;
		return true;
	}

	public void input(listUsers LU) throws IOException {
		double salary;
		super.input(LU);
		do {
			System.out.print("Input Salary: ");
			salary = objSc.nextDouble();
		} while (!setSalary(salary));
	}

	public String toString() {
		return "Employee" + super.toString() + "\nSlary: " + String.valueOf(salary);
	}

	public boolean transferMoney(Customer transfer, Customer receive, double money, int verificationCode) {

		if (verificationCode != transfer.getVerificationCode()) {
			System.out.println("Verification Code not match, Try again !");
			return false;
		}

		if (!transfer.setMoney(transfer.getMoney() - money - money * 5 / 100)) {
			System.out.println("Not enough money, Try again !");
			return false;
		}

		receive.setMoney(receive.getMoney() + money);
		System.out.println("Transfer Successful !");
		transfer.setVerificationCode(0);
		return true;

	}

	public boolean getOutMoney(Customer cus, double money, int verificationCode) {

		if (verificationCode != cus.getVerificationCode()) {
			System.out.println("Verification Code not match, Try again !");
			return false;
		}

		if (!cus.setMoney(cus.getMoney() - money - money * 5 / 100)) {
			System.out.println("Not enough money, Try again !");
			return false;
		}

		System.out.println("Get Out Money Successful !");
		cus.setVerificationCode(0);
		return true;

	}

	public boolean putOnMoney(Customer cus, double money, int verificationCode) {
		if (verificationCode != cus.getVerificationCode()) {
			System.out.println("Verification Code not match, Try again !");
			return false;
		}

		cus.setMoney(cus.getMoney() + money);
		System.out.println("Put On Money Successful !");
		cus.setVerificationCode(0);
		return true;
	}
}

package Users;

import java.io.*;
import java.util.*;
import Deals.*;
import Function.*;

public class Manager extends Users {
	listDeals D = new listDeals();
	Scanner objSc = new Scanner(System.in);

	private double salary;

	public Manager() {
		super();
		this.salary = 0;
	}

	public Manager(long id, String name, String address, String password, int kind, int verificationCode, String phone, double salary) {
		super(id, name, address, password, kind, verificationCode, phone);
		this.salary = salary;
	}

	public double getSalary() {
		return salary;
	}

	public boolean setSalary(double salary) {
		if (salary < 0) {
			System.out.println("Value not available, Try again!!");
			return false;
		}
		this.salary = salary;
		return true;
	}

	public void input(listUsers LU) throws IOException {
		double salary;
		super.input(LU);
		do {
			System.out.print("Input Salary: ");
			salary = objSc.nextDouble();
		} while (!setSalary(salary));
	}

	public String toString() {
		return "Manager" + super.toString() + "\nSlary: " + String.valueOf(salary);
	}

	public void statistical() {
		System.out.println("Coming Soon!!");
	}

}

package Users;

import Deals.Deal;

public class listUsers {

	public int countUsers;
	public Users[] listOfUsers = new Users[100];

	public void initList() {
		countUsers = 0;
		for (int i = 0; i < 100; i++)
			listOfUsers[i] = new Users();
	}

	public boolean addUsers(Users u) {
		if (countUsers > 100) {
			System.out.println("Not enought Empty!!");
			return false;
		} else {
			listOfUsers[countUsers] = u;
			System.out.println("Add users to list successful!!");
			countUsers++;
			return true;
		}
	}

	public void showList() {
		for (int i = 0; i < countUsers; i++) {
			System.out.println("\nInformation Users " + (i + 1) + ": ");
			System.out.println(listOfUsers[i].toString());
		}
	}

	public boolean checkId(long id, int kind) {
		for (int i = 0; i < countUsers; i++)
			if (listOfUsers[i].getId() == id && listOfUsers[i].getKind() == kind)
				return true;
		System.out.println("ID not Found !");
		return false;
	}
	

	public void findByIdCus(long id) {
		boolean check = false;
		for (int i = 0; i < countUsers; i++)
			if (listOfUsers[i].id == id && listOfUsers[i].getKind() == 1) {
				System.out.println(listOfUsers[i].toString() + "\n");
				check = true;
			}
		if (!check)
			System.out.println("Find not Found!");
	}

	public int findById(long id) {
		for (int i = 0; i < countUsers; i++)
			if (listOfUsers[i].id == id)
				return i;
		return -1;
	}

	public void findByNameCus(String name) {
		boolean check = false;
		for (int i = 0; i < countUsers; i++)
			if (listOfUsers[i].name.equalsIgnoreCase(name) && listOfUsers[i].getKind() == 1) {
				System.out.println(listOfUsers[i].toString() + "\n");
				check = true;
			}
		if (!check)
			System.out.println("Find not Found!");
	}

	public void findByKind(int Kind) {
		boolean check = false;
		for (int i = 0; i < countUsers; i++)
			if (listOfUsers[i].kind == Kind) {
				System.out.println(listOfUsers[i].toString() + "\n");
				check = true;
			}
		if (!check)
			System.out.println("Find not Found!");
	}
}
